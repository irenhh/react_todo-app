{"version":3,"sources":["ListEditor.js","TodoList.js","Filter.js","localStorageHelper.js","App.js","index.js"],"names":["ListEditor","props","todo","changeItemBody","editingText","getInputText","exitEditing","react_default","a","createElement","onSubmit","event","id","type","className","value","onChange","onBlur","autoFocus","TodoList","listOfTodos","makeEditable","deleteItem","map","index","concat","isChecked","key","isInEditMode","src_ListEditor","checked","onDoubleClick","onClick","stopPropagation","body","Filter","activeFilterButton","visibleList","Fragment","href","hydrateStateWithLocalStorage","state","Object","keys","forEach","prototype","hasOwnProperty","call","localStorage","getItem","JSON","parse","objectSpread","defineProperty","error","saveStateToLocalStorage","setItem","stringify","App","todoItems","todoItemsToShow","inputText","componentDidMount","_this","setState","prevState","preparedState","window","addEventListener","componentWillUnmount","removeEventListener","handleSubmit","preventDefault","replace","length","newTodo","Date","now","handleChange","target","handleCheckAll","isTodoChecked","allCheckedTodos","toConsumableArray","handleItemChanged","checkedTodos","modifiedTodos","filter","deleteAllItems","find","itemToEdit","memoizedItemsList","cache","status","uncheckedItems","this","placeholder","style","display","some","htmlFor","src_TodoList","src_Filter","React","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.05a6acdc.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ListEditor(props) {\n  const {\n    todo,\n    changeItemBody,\n    editingText,\n    getInputText,\n    exitEditing,\n  } = props;\n\n  return (\n    <form onSubmit={event => changeItemBody(todo.id, event)}>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={editingText}\n        onChange={getInputText}\n        onBlur={() => exitEditing(todo.id)}\n        autoFocus\n      />\n    </form>\n  );\n}\n\nListEditor.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number,\n  }).isRequired,\n\n  changeItemBody: PropTypes.func.isRequired,\n  editingText: PropTypes.string.isRequired,\n  getInputText: PropTypes.func.isRequired,\n  exitEditing: PropTypes.func.isRequired,\n};\n\nexport default ListEditor;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ListEditor from './ListEditor';\n\nfunction TodoList(props) {\n  const {\n    listOfTodos,\n    changeItemBody,\n    editingText,\n    getInputText,\n    exitEditing,\n    onChange,\n    makeEditable,\n    deleteItem,\n  } = props;\n\n  return (\n    listOfTodos.map((todo, index) => (\n      <li\n        className={`editing ${todo.isChecked ? 'completed' : ''}`}\n        key={todo.id}\n      >\n        {todo.isInEditMode && (\n          <ListEditor\n            todo={todo}\n            changeItemBody={changeItemBody}\n            editingText={editingText}\n            getInputText={getInputText}\n            exitEditing={exitEditing}\n          />\n        )}\n\n        <div className={todo.isInEditMode ? 'view' : ''}>\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={`todo-${index + 1}`}\n            checked={todo.isChecked}\n            onChange={() => onChange(todo.id)}\n          />\n\n          <span\n            onDoubleClick={() => makeEditable(todo.id)}\n            onClick={event => event.stopPropagation()}\n          >\n            {todo.body}\n          </span>\n\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => deleteItem(todo.id)}\n          />\n        </div>\n      </li>\n    ))\n  );\n}\n\nTodoList.propTypes = {\n  listOfTodos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  changeItemBody: PropTypes.func.isRequired,\n  editingText: PropTypes.string.isRequired,\n  getInputText: PropTypes.func.isRequired,\n  exitEditing: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  makeEditable: PropTypes.func.isRequired,\n  deleteItem: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Filter(props) {\n  const {\n    activeFilterButton,\n    visibleList,\n  } = props;\n\n  return (\n    <>\n      <li>\n        <a\n          href=\"#/\"\n          className={activeFilterButton === 'all'\n            ? 'selected'\n            : ''}\n          onClick={() => visibleList('all')}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={activeFilterButton === 'active'\n            ? 'selected'\n            : ''}\n          onClick={() => visibleList('active')}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={activeFilterButton === 'completed'\n            ? 'selected'\n            : ''}\n          onClick={() => visibleList('completed')}\n        >\n          Completed\n        </a>\n      </li>\n    </>\n  );\n}\n\nFilter.propTypes = {\n  activeFilterButton: PropTypes.string.isRequired,\n  visibleList: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","export const hydrateStateWithLocalStorage = (state) => {\n  Object.keys(state).forEach((key) => {\n    if (Object.prototype.hasOwnProperty.call(localStorage, key)) {\n      let value = localStorage.getItem(key);\n\n      try {\n        value = JSON.parse(value);\n        state = {\n          ...state,\n          [key]: value,\n        };\n      } catch (error) {\n        state = {\n          ...state,\n          [key]: value,\n        };\n      }\n    }\n  });\n\n  return state;\n};\n\nexport const saveStateToLocalStorage = (state) => {\n  Object.keys(state).forEach((key) => {\n    localStorage.setItem(key, JSON.stringify(state[key]));\n  });\n};\n","import React from 'react';\nimport TodoList from './TodoList';\nimport Filter from './Filter';\nimport { hydrateStateWithLocalStorage, saveStateToLocalStorage } from './localStorageHelper';\n\nclass App extends React.Component {\n  state = {\n    todoItems: [],\n    todoItemsToShow: [],\n    inputText: '',\n    activeFilterButton: 'all',\n    editingText: '',\n  }\n\n  componentDidMount = () => {\n    this.setState((prevState) => {\n      const preparedState = hydrateStateWithLocalStorage(prevState);\n\n      return {\n        ...prevState,\n        ...preparedState,\n      };\n    });\n\n    window.addEventListener(\n      'beforeunload',\n      () => saveStateToLocalStorage(this.state)\n    );\n  }\n\n  componentWillUnmount = () => {\n    window.removeEventListener(\n      'beforeunload',\n      () => saveStateToLocalStorage(this.state)\n    );\n\n    saveStateToLocalStorage(this.state);\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    if (this.state.inputText.replace(/\\s/g, '').length < 1) {\n      return;\n    }\n\n    const newTodo = {\n      body: this.state.inputText,\n      id: Date.now(),\n      isChecked: false,\n      isInEditMode: false,\n    };\n\n    this.setState(prevState => ({\n      todoItems: prevState.todoItems.concat(newTodo),\n      todoItemsToShow: prevState.todoItems.concat(newTodo),\n      inputText: '',\n    }));\n  }\n\n  handleChange = (event) => {\n    this.setState({ inputText: event.target.value });\n  }\n\n  handleCheckAll = (event) => {\n    const isTodoChecked = event.target.checked;\n\n    this.setState((prevState) => {\n      const allCheckedTodos = [...prevState.todoItems];\n      allCheckedTodos.forEach(todo => (todo.isChecked = isTodoChecked));\n\n      return {\n        todoItems: allCheckedTodos,\n        todoItemsToShow: allCheckedTodos,\n      };\n    });\n  }\n\n  handleItemChanged = (id) => {\n    this.setState((prevState) => {\n      const checkedTodos = prevState.todoItems.map((todo) => {\n        if (todo.id !== id) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          isChecked: !todo.isChecked,\n        };\n      });\n\n      return {\n        todoItems: checkedTodos,\n        todoItemsToShow: checkedTodos,\n      };\n    });\n  }\n\n  deleteItem = (id) => {\n    this.setState((prevState) => {\n      const modifiedTodos = prevState.todoItems.filter(todo => todo.id !== id);\n\n      return { todoItems: modifiedTodos, todoItemsToShow: modifiedTodos };\n    });\n  }\n\n  deleteAllItems = () => {\n    this.setState((prevState) => {\n      const modifiedTodos = prevState.todoItems\n        .filter(todo => !todo.isChecked);\n\n      return { todoItems: modifiedTodos, todoItemsToShow: modifiedTodos };\n    });\n  }\n\n  makeEditable = (id) => {\n    this.setState((prevState) => {\n      const editableItems = prevState.todoItems.map((todo) => {\n        if (todo.id === id) {\n          todo.isInEditMode = true;\n        }\n\n        return todo;\n      });\n\n      const editingText = prevState.todoItems\n        .find(todo => todo.id === id).body;\n\n      return {\n        todoItems: editableItems,\n        editingText,\n      };\n    });\n  }\n\n  changeItemBody = (id, event) => {\n    event.preventDefault();\n    this.setState((prevState) => {\n      const itemToEdit = prevState.todoItems.find(todo => todo.id === id);\n\n      if (prevState.editingText.length < 1) {\n        return this.deleteItem(id);\n      }\n\n      itemToEdit.body = prevState.editingText;\n      itemToEdit.isInEditMode = false;\n\n      return {\n        editingText: '',\n      };\n    });\n  }\n\n  exitEditing = (id) => {\n    this.setState((prevState) => {\n      const itemToEdit = prevState.todoItems.find(todo => todo.id === id);\n      itemToEdit.isInEditMode = false;\n\n      return {\n        editingText: '',\n      };\n    });\n  }\n\n  getInputText = (event) => {\n    this.setState({ editingText: event.target.value });\n  }\n\n  memoizedItemsList = () => {\n    let cache = {};\n\n    return (status) => {\n      if (status in cache) {\n        this.setState({\n          todoItemsToShow: cache[status],\n          activeFilterButton: status,\n        });\n      } else {\n        let modifiedTodos;\n\n        switch (status) {\n          case 'active': modifiedTodos = this.state.todoItems\n            .filter(todo => !todo.isChecked);\n            break;\n\n          case 'completed': modifiedTodos = this.state.todoItems\n            .filter(todo => todo.isChecked);\n            break;\n\n          default: modifiedTodos = [...this.state.todoItems];\n        }\n\n        cache = {\n          ...cache,\n          [status]: modifiedTodos,\n        };\n\n        this.setState({\n          todoItemsToShow: modifiedTodos,\n          activeFilterButton: status,\n        });\n      }\n    };\n  }\n\n  visibleList = this.memoizedItemsList(this.state.todoItems);\n\n  render() {\n    const uncheckedItems = [...this.state.todoItems]\n      .filter(todo => !todo.isChecked).length;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <form onSubmit={this.handleSubmit}>\n            <input\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              onChange={this.handleChange}\n              value={this.state.inputText}\n            />\n          </form>\n        </header>\n\n        <section className=\"main\" style={{ display: 'block' }}>\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            checked={!(this.state.todoItems\n              .some(todo => !todo.isChecked))}\n            onChange={this.handleCheckAll}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <ul className=\"todo-list\">\n            <TodoList\n              listOfTodos={this.state.todoItemsToShow}\n              onChange={this.handleItemChanged}\n              deleteItem={this.deleteItem}\n              makeEditable={this.makeEditable}\n              changeItemBody={this.changeItemBody}\n              getInputText={this.getInputText}\n              exitEditing={this.exitEditing}\n              editingText={this.state.editingText}\n            />\n          </ul>\n        </section>\n\n        <footer className=\"footer\" style={{ display: 'block' }}>\n          <span className=\"todo-count\">\n            {`${uncheckedItems} items left`}\n          </span>\n\n          <ul className=\"filters\">\n            <Filter\n              activeFilterButton={this.state.activeFilterButton}\n              visibleList={this.visibleList}\n            />\n          </ul>\n\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            style={this.state.todoItems\n              .some(todo => todo.isChecked === true)\n              ? { display: 'block' }\n              : { display: 'none' }}\n            onClick={this.deleteAllItems}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}